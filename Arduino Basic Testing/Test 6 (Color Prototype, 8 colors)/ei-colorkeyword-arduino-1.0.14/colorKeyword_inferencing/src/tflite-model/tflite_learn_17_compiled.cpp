/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 26.06.2024 20:53:10

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 8
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 4800;
#else
constexpr int kTensorArenaSize = 3776;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,403 } };
const TfArray<1, float> quant0_scale = { 1, { 0.041212484240531921, } };
const TfArray<1, int> quant0_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 1, 31, 13, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data2[4] = { 1, 31, 1, 32, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data3[4] = { 1, 1, 16, 32, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data4[4] = { 1, 16, 1, 64, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data5[2] = { -1, 512, };
const TfArray<1, int> tensor_dimension5 = { 1, { 2 } };
const ALIGN(16) int32_t tensor_data6[11] = { 68, 27, -235, -212, 336, 5, 392, -65, 88, 80, -458, };
const TfArray<1, int> tensor_dimension6 = { 1, { 11 } };
const TfArray<1, float> quant6_scale = { 1, { 0.00018404192815069109, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[11*512] = { 
  -27, 28, 7, -34, 9, -3, 7, -42, -29, 31, -67, -67, 11, -10, -35, 11, -6, -15, -9, -51, 17, 24, -52, -19, -71, -46, 41, 12, -6, -51, -31, 26, -8, -30, 9, 4, 18, -73, 4, -12, 13, 24, -7, -62, -30, -45, 16, 20, -16, 2, -10, 40, 24, -14, 14, 44, 29, -56, -38, -58, 64, 3, 9, -31, -22, -23, -7, -15, 32, 41, -28, 23, -35, 30, -32, 24, -9, 4, -24, 17, 3, -9, -66, -22, -19, 18, -18, -27, -14, -44, -69, 1, -23, 16, -43, 17, -25, 19, -45, 43, -4, -33, -2, 31, 17, 35, 18, -19, 51, -32, -12, 19, -18, -27, -11, 16, 14, 12, 4, 5, 21, -55, -83, -26, 4, 23, -19, -21, -28, -18, -1, -13, 4, 10, -19, 16, -34, 1, 17, 40, -75, 1, 7, 19, 8, -11, -29, -39, 24, -93, -14, 33, -29, -58, -68, -32, 19, 5, -25, 52, -28, 53, -49, -19, 14, -33, -24, 65, 1, 30, 12, -17, 38, 4, 15, -7, -9, -22, 19, -46, 34, 46, -32, -22, 22, -78, -82, -35, -13, -3, -23, -23, -6, -7, 21, 16, -43, 30, 12, 8, -46, -77, 73, 8, -98, -8, -15, 26, 6, -18, 25, -46, -17, -70, -51, 45, -52, -69, -78, 9, -17, -18, -15, 3, -13, 46, -85, 3, -15, -67, 21, 18, 7, -4, 6, -33, 39, 56, -10, 4, -16, -11, 1, -73, -1, 41, -11, -44, 23, -40, -86, -28, -52, 16, -28, -15, -15, 7, 12, -5, 26, 7, -21, -9, 3, -43, 70, 28, -77, -31, -9, -43, 33, -47, 7, -92, 9, -77, -39, 44, -43, -51, -69, -33, -29, -2, -1, -52, -8, 30, -36, -41, 16, -27, 12, -16, -16, 5, 0, -17, 34, 25, -19, -79, -31, 22, 5, -10, -28, 33, -31, -30, -32, 31, -16, -22, -44, 15, -35, -17, -42, 4, 63, 34, 20, -50, 23, -15, 6, -15, 11, 38, -35, 15, 11, -50, 35, -26, 39, -29, -18, 11, -28, 45, -17, -15, -25, 24, -26, 8, -25, -3, -9, 38, -49, -70, -5, -43, -21, -59, 27, -35, -19, 5, 21, 23, -7, -15, 6, 19, -15, -25, 15, 22, -43, 11, 16, -43, -27, -36, 13, -30, -61, 4, -7, -3, -4, -18, 4, 11, -18, -10, 54, 25, 5, 15, 9, 24, -54, -53, -21, -12, -26, -4, 2, 13, -21, 13, -29, 9, -11, -24, 1, -13, -38, -5, 15, 46, 14, -31, 3, -29, 14, -15, -27, -30, -26, -8, 0, -73, -45, -26, -19, 39, -1, -36, -54, -14, -48, 20, 1, -28, -52, -54, -19, 4, -18, -20, -47, 26, 37, -28, 22, -44, -35, -10, -25, 34, -27, -33, 39, -16, -28, 14, -27, -47, -100, -14, 4, 22, -33, -49, -74, -10, -55, 26, -7, -34, -46, 32, -17, -39, 38, -32, -26, -25, -25, -26, -16, 31, -7, 1, -67, -28, -9, 1, -16, -44, -12, -4, -27, -56, -44, 6, -19, -32, -66, -12, 15, -23, 17, -27, 
  -71, -23, 14, 3, 26, 8, -35, -19, -37, -13, 13, -27, -48, 7, 10, 12, -63, -68, 5, 74, -28, 0, -35, -40, 57, -51, -9, 53, 13, -40, -26, 13, 10, 5, -30, 11, -13, -10, 5, -45, -4, -2, -8, 45, -43, -15, -49, 10, 23, 40, 10, 6, -19, -22, -74, 8, 22, -22, -42, -46, -6, -65, 12, -36, -52, 2, 6, -33, 13, -63, -2, -4, -1, -1, -4, 15, -26, 16, -9, 14, 28, -40, -43, 63, 14, -38, -16, -27, 38, -62, -52, 25, -15, -5, -81, 32, -1, 0, 22, -7, 12, 22, -31, -66, 5, 12, 6, 16, -24, -9, 16, -9, -18, 0, -19, 56, -12, -9, -76, 37, 44, 24, 0, -21, -2, -66, 53, 12, -46, 0, 20, -34, -6, -91, 34, -13, 22, 4, 6, 4, 7, 12, -18, 5, 26, -5, 8, 34, -16, -58, 14, -95, 6, 29, 33, -26, -5, -13, -31, 24, -10, -28, 11, -29, 12, 47, -3, -50, 2, -30, 18, 2, -16, -35, -1, -50, 9, -6, -9, 33, 35, 7, -10, 9, 34, -11, 9, -11, -23, -78, 47, 1, 25, -8, -35, -67, -69, -68, 33, -18, -20, 6, -39, -2, 6, -22, 10, 17, 20, 25, -9, 39, 3, -11, -18, -112, -40, 28, 49, -63, -10, -1, -34, 2, 14, -25, 19, -29, -7, -3, -8, -37, -29, -24, 4, -34, -13, -32, 0, -42, 23, -49, 8, 25, -1, 4, 25, -5, 16, 0, 37, 41, 14, -59, 36, -36, 20, -13, -51, -54, -94, -60, 24, 10, -20, -21, 2, 25, 60, -29, 0, 30, 5, 25, 13, -63, -17, 52, -46, -95, -125, 53, 28, -71, -28, -27, -25, -120, -1, -38, 6, 17, 5, 33, 19, -18, -5, -30, 10, 10, 13, -27, -64, -40, -19, -56, -6, -6, 2, -13, 35, 16, -52, 7, 33, 53, -1, -81, -70, -45, 5, -48, 33, -3, 26, -35, 17, -40, -43, -44, 0, -56, 5, 7, -25, 24, -11, 41, -3, -16, 5, 52, -61, -26, 36, 28, 48, -49, 8, -1, -2, -111, -35, -23, -36, -20, 12, -40, -14, -41, -7, -21, -89, 8, -23, 1, -75, -6, 9, -60, 6, -59, -24, 0, 11, -90, -41, -13, 16, 53, 33, -63, -70, -36, 8, -34, 2, 20, -21, -42, -53, -28, -5, -32, -5, -29, 40, -4, 5, 18, -56, 11, -25, -16, 0, 41, -60, 25, 9, 19, 44, -27, -18, -23, 11, -28, -10, 28, -47, 10, -3, -76, 14, -21, 20, -36, -54, 10, 0, 31, -27, -26, 7, -37, 8, -55, -30, -4, 29, -85, -45, -22, 15, 45, -11, -49, -49, -7, 2, -11, 26, 31, -46, -13, -41, -29, -43, -26, 28, -25, -24, -10, 3, 9, -24, 49, -59, -48, 18, 7, -107, 9, 46, -2, -26, -48, 21, -53, -5, -107, -16, 6, -13, 25, 11, -31, 18, 32, -13, -65, -67, 41, -34, -10, -9, 15, -31, -10, 2, -63, 9, 9, 37, -44, -40, -16, -31, -8, 43, -28, -97, -22, 
  6, -1, -38, -7, 31, -90, 22, 5, -18, -4, -46, -52, 32, 2, 0, -9, -31, -14, -10, 3, -14, 28, -52, -40, -22, -89, -10, -25, -4, 4, 23, -17, -31, -34, 2, 4, 9, -34, -11, -6, 5, -100, -31, 35, 22, 52, 15, -22, 8, 12, 2, 36, 80, 20, 34, 2, 20, 15, 7, -7, 17, -77, -19, -28, 34, 0, -6, 30, 38, -66, 44, -40, -17, 9, -13, -52, -24, -27, -20, -12, -13, -13, -18, -24, -15, 51, -28, -10, 13, 22, 11, 29, -26, -33, -7, 2, 8, -8, -30, -21, 13, 3, -2, -59, -11, -58, -42, 28, 45, 2, -4, -33, 17, 39, -4, 7, 12, 19, 26, -34, -43, -13, 26, -13, -18, -76, -29, -8, -23, 47, 17, 32, 12, -72, 31, -30, -34, 68, 28, -35, 27, 2, 9, 19, -35, -17, 14, 24, 13, 59, -105, 3, 13, 16, -7, -23, -7, -21, 11, 17, -21, -5, -46, -48, -3, -56, -3, -22, -20, -36, -27, 16, 6, 9, 17, 27, -22, 37, -17, 44, 6, 17, 15, 4, -31, -2, 18, 5, -27, -110, -67, -38, 34, 40, 11, 36, 71, -62, 40, -47, -19, 36, -1, -41, -15, 0, -20, 31, -25, -16, 30, -17, -18, 33, -60, 31, 0, 16, 20, -17, -20, -10, 4, 26, -11, -25, -94, -4, 9, -48, -6, -27, -1, -25, -37, 27, 12, -2, -72, 2, -19, 27, -22, 19, -11, 33, 31, -24, -7, -5, 59, -15, -106, -108, -51, -20, 8, 63, -8, -10, 44, -31, 37, -50, -55, 52, -14, -21, -44, 7, -13, 38, -42, -19, 31, -3, 9, 8, -62, 23, -4, 29, -4, -16, -15, -31, -15, 9, -55, -11, -40, -39, -15, -50, 22, 15, 10, 29, -16, 35, 21, -20, -56, -31, -6, 32, -27, 24, 8, 29, 29, -69, -42, 3, 39, 23, -76, -54, -38, -20, 30, 31, -10, 7, -24, -37, 30, -28, -54, -6, -59, -36, -22, 8, 6, 13, -6, -52, 18, -36, -13, -58, -64, -15, -51, 44, 13, 0, -22, 4, -21, 5, -33, -2, -35, -17, 11, -71, 16, -31, -12, -18, -26, -4, 30, 5, -47, -41, 3, 36, 9, -16, 17, 20, 26, -22, -49, 22, 65, -41, -37, -46, -27, -42, 12, -43, 17, -52, 8, -46, 11, -21, -65, -20, -30, -37, 5, 12, -18, -3, -47, -57, -32, -36, -20, -80, -74, -28, -51, 42, -8, -9, 3, -6, -19, 8, -2, -9, -34, -3, 9, -104, -19, -17, 13, -21, -25, 34, 48, -54, -41, -4, 14, 47, -9, -25, -22, -23, 8, -38, 11, 0, 23, -59, -6, -57, -15, 4, -9, -43, 15, -51, 31, -59, -49, -45, -39, -18, -24, -67, -23, -10, -1, 19, -76, -76, 24, 12, -11, -27, -34, -24, 18, 27, -33, 8, -12, -44, -1, 14, -27, 12, -41, -53, 12, -103, 20, -1, -12, 29, -26, 22, 50, -93, -17, -27, -3, -21, -28, -55, -22, -11, -23, -4, -7, -9, 22, -52, -20, 14, -26, -8, 
  8, -9, -20, 17, 1, 30, 30, -28, -15, -7, 19, -40, -29, -6, 25, 5, -24, 12, 21, -60, 6, -9, -46, 20, 33, -1, 29, -2, 23, -55, 11, 12, 17, 21, -35, 1, -18, -72, 4, -2, 20, -3, -11, 15, -4, -5, -3, 26, -13, -34, -3, -60, 16, 17, 40, -33, -11, -19, 31, 43, 1, -75, -26, 19, 55, -43, 2, -23, 25, 19, -20, -61, -32, -19, 48, -39, 32, 1, -20, 14, -97, -22, 19, -28, 23, 12, -54, 49, 6, 9, 23, 32, 15, -32, 1, -16, -26, 10, -76, 39, -27, -84, 5, -26, 3, 7, -70, -1, -43, -10, 17, 35, -35, -13, -13, -36, 18, -2, 46, -29, -3, -8, 8, 50, 7, -69, -49, 10, 43, -36, -18, -32, -71, 4, -32, -44, -31, -49, -16, -41, 35, -12, 13, 31, -62, 8, -19, -17, -14, -11, -22, 19, -15, -37, 26, 27, 15, -24, 16, 5, 7, 4, -52, -19, 15, -79, -13, -51, -7, -22, -86, 7, -54, 2, 21, 51, 0, -10, -8, -15, 10, -12, 36, -17, -4, 3, -26, 51, 23, -78, -26, -22, 25, -29, -50, -54, -84, -55, -42, -62, -5, 1, -15, -50, 33, -11, -39, 25, -4, 3, 22, -50, 13, -2, -45, 21, -77, -33, 4, 5, -28, -34, 31, 25, 3, 15, 19, -25, -21, -7, 11, -32, -22, -29, -37, -34, -41, -3, 31, 19, -3, 12, 12, -16, 10, 11, 23, -7, -41, -10, -30, 26, -18, -71, 28, 8, 20, -32, -50, -17, -91, -60, 11, -70, -21, 28, -2, -80, 47, 3, -17, 23, 20, 15, -9, -40, -21, -21, -26, 2, -99, -64, 27, 14, 10, -13, 5, 7, -11, -12, -15, 72, -15, -29, -13, -47, -24, -28, -36, -5, -21, -5, 42, 28, 23, -3, -11, -34, -17, 21, 28, -16, -7, -6, -7, 35, 32, -64, 10, -14, 9, -3, -31, -43, -48, 0, -28, -57, -38, 14, 4, -29, 53, 12, -56, -4, 22, 9, -30, -60, 16, -37, -55, -66, -3, -13, 16, -7, -8, 0, 13, 18, -20, -30, 2, 61, 1, -6, -31, -16, -16, 24, -52, 8, -21, 22, 16, 34, 15, -5, -22, -23, 13, -6, -17, -38, 3, -53, -18, 37, 19, -21, 3, -17, -10, -15, -42, -29, -34, -33, 19, 5, -10, -21, 29, -28, 35, -11, 2, 27, 37, -5, -39, -13, 17, 3, 15, -14, -1, -67, 20, -9, 16, -5, 22, 36, 2, 6, 19, 61, -1, 18, 9, -23, 28, -4, -28, 20, -43, -1, 47, 21, -12, 26, 2, -18, 21, 28, -41, -6, -35, 30, -46, 52, 21, -63, -15, -42, 13, 40, -5, -42, 6, -7, 24, -36, -7, -40, -10, -6, 27, -6, -13, 18, 39, 26, -11, -10, -11, -18, -3, -21, 25, -38, 49, 29, -12, -20, 50, 18, 4, -17, 5, 60, 26, 12, -1, -1, 24, -19, -48, 35, -23, 52, 48, 27, -9, 30, 16, -12, 31, 35, -57, -18, 3, 31, -79, 34, 18, -72, 1, -29, 
  31, 40, 65, 16, 9, -2, 50, 10, 31, -37, -7, 3, -88, -1, 27, 40, -39, 5, 51, -17, -26, -35, 10, -10, -8, -28, 35, 11, -3, -6, 26, -7, 3, 67, 59, 24, 6, 5, 18, -54, 28, 18, 25, 5, 39, 63, -27, -26, -16, 18, -11, -18, 56, 26, 62, 36, 0, -6, -33, -80, -22, 10, 13, 45, -13, 15, 45, 17, -32, -64, -26, -28, 19, -40, 30, -6, -70, -2, -45, -30, -14, -36, 26, -47, -15, -10, -7, 32, 9, -33, -44, -21, -10, -25, -2, 15, -4, 38, -8, 8, -8, -19, 5, 4, -1, -24, 29, 13, -37, -11, 26, 46, 10, -8, 6, -7, 5, 27, -11, 15, -32, -35, -28, -46, -21, -64, -16, 57, 32, -17, 59, 24, 2, -34, -19, -24, 11, -17, 21, -11, -44, -13, -14, 4, -65, -12, 28, 29, -8, -24, 17, 53, 7, 7, -6, 42, -10, -42, -7, 21, 15, 30, -55, -24, 0, -71, -4, 15, -2, -9, 38, 13, -15, -26, 28, 31, -9, -16, -22, -27, -34, -9, -37, -4, -19, -31, -36, -12, -30, -47, 20, 29, -7, 14, 47, 18, -40, -29, -46, -32, 9, -2, -24, -1, -75, 15, -35, -39, -53, -32, -4, -48, 22, -33, 0, 17, 34, -64, -35, -28, 12, 5, -9, 26, 6, -10, 12, 2, -9, -41, 16, -14, -13, 19, 19, -11, -52, -60, -10, 0, 11, -22, -7, -24, -13, -32, -56, 21, -41, -38, -87, -38, -33, -79, -7, 28, 11, 8, 85, 15, 12, -43, -40, -40, 20, 28, -15, -13, -23, 24, -32, -13, -86, -41, 1, -15, -1, -3, 2, 37, -10, -37, -50, -42, -18, -4, -35, -4, -14, -12, 13, -41, -6, -31, 16, -22, 2, -30, 27, 30, -39, -11, -4, 21, -5, -27, -16, 8, -3, 0, -59, 0, -18, -61, -54, -14, -26, 1, 30, 65, -32, 0, 41, 42, 16, -20, -47, -23, 32, 13, -35, -15, -64, 18, -25, -40, -25, -28, 4, -4, 3, -23, 23, 31, 2, -22, -78, -17, 0, -15, 0, -3, -10, -15, -6, -15, 10, -10, -16, 44, -14, -19, 9, 16, -57, 4, 10, 16, -17, 33, -14, -14, -32, -3, -11, 27, 18, -32, -26, -34, 18, -54, 44, 54, 1, 28, 50, 16, 11, -4, 25, 1, 12, -25, 4, -9, -95, 6, -6, 1, -14, -37, 25, -13, 7, -5, 20, 17, 14, -17, -72, -32, 4, 23, -18, 60, 22, 11, 9, -2, -12, -5, -16, 85, 2, 48, 42, -25, -17, -33, 35, -3, 18, 3, 17, -29, 37, 0, -21, 29, -23, -18, -18, -13, 14, 2, 24, 45, 37, -17, 31, 12, 17, -91, -20, -30, -7, 0, 20, 3, -38, 11, 9, -32, -60, -5, 28, 55, -23, 2, 6, 12, 60, 4, -34, 36, -15, -12, -2, 19, 1, 0, 1, 3, 0, -13, -2, 26, -2, 5, 20, -1, -23, -2, 11, 1, 13, -24, 11, -16, -19, 39, 4, 19, 7, -22, -24, -34, -49, -50, -2, 69, 
  9, -3, -24, -30, 13, 32, -30, 56, -4, 9, -3, 31, 0, -1, 26, -5, 24, -7, -20, 13, 10, -20, -78, -22, 26, -44, -13, 30, 2, 21, -20, -82, 5, -4, -14, -42, -18, 3, 24, 14, -20, 11, 12, -6, -10, -8, -47, 37, -15, -31, 5, -26, 11, -25, 14, -24, 7, -28, -60, 4, 31, 13, -25, 6, -14, 10, -16, 10, 23, 20, -20, 25, 29, -16, -15, 24, -24, 8, 13, -62, 30, -43, -47, -26, 3, -18, 18, 10, 29, 22, -19, 37, 10, 0, -43, -2, -8, 35, -7, 11, -7, 37, 12, 42, -14, 18, 13, -22, -25, -115, -55, 0, 0, -13, 5, -14, -21, -54, -57, -42, 27, -66, -73, -13, -21, 36, -28, 27, -43, 0, -7, -34, 18, 37, -12, 45, 31, -23, -26, 27, -30, -11, -2, -28, 13, -43, -65, -20, -7, 2, -1, -43, 17, 23, 8, -2, -4, 16, -40, -27, 2, 23, -5, -52, -22, 34, 3, 26, 7, 60, 6, -3, -4, -93, -24, -42, -6, -24, 2, -50, 23, -54, -67, -39, 31, -73, -60, -32, 8, 18, -8, -5, -60, -43, -8, -54, 35, 27, -36, 36, 7, 18, -11, 44, -11, 20, 10, -14, 10, -44, -72, -37, -20, -19, -23, -55, 22, -1, 26, 10, 3, -1, -49, -55, 6, 11, 16, 33, -4, 29, -33, 38, -8, 34, 30, -14, -13, -42, -61, 1, 3, -49, 23, -36, -10, -74, -68, -21, 9, -46, -43, -25, -10, 24, -25, -10, -80, -16, -7, -37, 13, 53, -49, 34, 18, 54, 6, 25, -20, -30, -11, -31, 22, -19, -43, -58, 15, -1, -24, -63, 21, 30, -22, 0, -1, 13, -54, -30, 5, 2, 7, 1, 1, 19, -20, 45, -10, 56, 43, 10, -24, -69, -32, 30, 3, -75, -2, 14, -31, -66, -75, -16, -54, -42, -64, -43, 29, 28, -6, 6, -76, 8, -52, -31, 4, 28, -41, 29, 23, 47, -47, 40, -2, -18, -3, -3, 6, -55, -47, -10, 14, -9, -83, -34, -40, 18, -9, 44, 10, 18, 4, -30, -26, 16, 6, -40, -19, 12, 5, -27, 9, 31, 36, -5, -7, -41, -21, 35, -15, 2, 22, 9, -19, -44, -58, 4, -26, -32, -39, -58, -33, 26, 25, 17, -7, 18, 9, -3, -9, -36, -23, 0, -35, 25, 5, 9, 11, 20, 17, 3, -38, -29, -46, 6, 1, -18, -102, 30, 21, -12, 9, 31, -18, -7, -3, -44, 8, 11, -31, -1, -24, 18, -11, -53, 2, 51, -15, 17, -57, -73, -11, 35, -1, -20, -19, -7, -16, -12, -60, 0, -17, 12, -12, 15, 16, -36, 23, 36, 4, 2, -27, 8, -2, -5, -55, -16, -63, 20, -1, -10, 26, -18, -39, -12, 32, -23, 18, 14, -7, -6, -39, 6, -15, -25, -46, 8, -2, 27, 23, -71, -5, -37, 7, 25, 6, -31, 31, -35, -18, 33, -21, 14, -83, -42, -60, -5, 2, 1, -20, -43, 14, -21, -41, -37, 27, -25, -20, 19, 46, 35, 22, 27, 
  22, -15, -14, -56, -6, 12, -17, 15, -58, -40, 48, -22, -28, -18, -26, 17, 21, -28, -43, -57, 24, -66, -40, -50, 13, -58, -39, 22, 25, 11, -50, -79, 2, -23, -42, 5, -21, -9, -34, -5, -8, 8, 2, -65, 0, -15, -72, 34, 20, -12, 4, -42, 11, 32, -15, -73, -22, 5, -47, -44, -5, -1, 0, -2, -23, 41, 25, -47, 9, 18, 19, 17, -32, -72, 27, -57, -6, -11, -19, 12, -39, -30, -21, -63, -2, -34, -123, -50, 8, -28, -16, -3, -16, -36, -23, -45, -25, 0, -28, -58, 11, -17, -11, 16, 13, 58, -1, -3, 9, 39, -22, -2, -22, -34, -7, 0, -2, 39, 44, -91, -4, 21, -42, -25, 28, -10, -47, -30, -40, 37, -7, 18, -11, 2, 19, 10, -44, -41, 18, -58, 30, -4, 34, -10, -31, 33, -48, -49, -4, -22, -89, -62, 20, -74, 14, -7, -26, -12, -20, -66, 36, -2, 10, -43, 16, 11, 11, -20, 8, 9, 4, 6, 0, 23, -41, -11, -23, 31, -12, 34, -1, 29, 20, -72, -32, 23, 7, -41, 15, -10, -87, 0, -25, 42, -14, -2, 53, 7, 21, 10, -47, -30, 21, -63, 31, 7, 19, -3, -52, 33, -51, -76, -16, -28, -113, -54, 21, -57, 27, -14, -21, -12, 13, -66, -5, -43, 17, 53, 11, 3, -4, 5, -10, 23, -6, 23, -11, 57, -16, -52, -21, 38, 15, 31, 28, 28, 5, -86, -47, 22, -16, -53, 71, 4, -98, -52, 12, 32, 18, 10, 39, 22, 16, 14, -34, -41, -1, -62, 42, 15, 16, 13, -45, 43, -27, -90, -29, -15, -88, -22, 27, -39, 34, -65, -3, 10, 13, -79, 44, -54, 6, -8, 17, -8, -2, 3, -17, 27, -57, -10, -24, 48, 0, -31, -13, 5, 15, 31, 15, 43, 20, -51, -10, -2, -15, -31, 22, 14, -53, -57, 5, 37, 18, -13, 8, 17, 22, 9, -57, -45, -19, -75, 20, 6, 25, 4, -56, 27, -47, -38, 30, 0, -76, -60, 56, -66, 39, -9, -25, 26, -18, -54, 4, -41, 1, 4, -14, 15, -32, -26, 22, -5, -61, 32, -17, 30, -48, 11, -15, 13, -7, 36, 9, 34, 5, -37, -64, -41, -9, -42, 76, -9, -50, -52, 9, 70, 28, -12, -12, 36, 12, -73, -46, -2, -27, -24, 35, 23, 20, 25, -14, 17, -1, -22, 12, -9, -79, -26, 42, -23, 29, 41, -3, 8, -7, -76, -14, -60, 15, 14, -15, -20, 18, -18, -2, 22, -13, -9, -8, 20, -27, 30, -26, 4, -10, 17, -14, 37, 7, -35, -16, -26, -17, -67, 29, 9, -20, 16, 12, -55, 11, -10, -10, 56, 18, 16, -26, -38, 28, -20, 4, -9, -22, 20, -79, 26, 7, -5, -31, -8, -63, -24, -1, 5, 61, -12, -28, -9, -14, -16, 7, 32, 11, -30, -30, -41, -7, -17, -28, 26, 39, 9, 17, -23, -5, -1, 20, -37, 16, -10, -9, -33, -6, -1, 24, -4, -7, 25, 4, 31, -13, 46, 
  -72, -1, -5, 5, 3, 21, -2, -25, 0, -24, -17, 13, -15, -30, -37, -45, 28, 0, -19, -52, -16, -11, -3, -26, -30, 21, -30, -11, -14, -6, -29, -5, 4, 28, -13, -23, -21, 0, -21, 1, -19, -26, -7, -25, -64, -23, -20, -48, -6, -38, -17, -21, 27, -36, -32, 16, -10, -40, -22, -6, -25, 1, -49, -6, -72, 11, -58, -3, 13, 29, 3, -4, -32, 29, 15, -41, -32, -4, 44, -54, 8, 22, -7, -52, -6, -10, -6, 10, 26, -26, 35, -7, -10, 26, -33, 2, 11, -70, -48, -24, 13, 24, 9, 10, 14, -1, -12, 19, 7, -53, 7, 17, -2, -49, -13, -68, 12, -24, 3, -13, -3, -29, -121, 8, 14, 33, -27, -32, -5, -24, -23, -32, 6, 29, 13, 16, -33, -30, 1, -29, -59, 25, 53, 6, 16, 43, -30, -64, 4, -31, 21, -6, 7, -31, 22, 20, -9, -43, -28, 9, -18, -30, -35, 34, -20, 34, 19, 42, -24, -8, -36, -7, 27, -18, 18, 28, 4, -22, 6, -30, 22, 8, -6, -12, 38, -48, -30, -23, -14, 16, -58, -27, 25, -33, -26, -51, 13, 39, 29, 19, -56, -17, -43, -34, -34, -15, 55, -11, 22, 53, -60, -38, -21, 14, -14, 4, 37, -42, 40, 46, 12, 10, -15, 30, 10, -3, -23, -28, -4, 34, 15, 36, -11, 11, -25, 11, 36, -22, 10, 33, 7, -62, 8, -71, 36, 17, 20, -42, 27, -74, 15, 3, -33, 27, 8, 0, 45, -31, -1, -47, 36, 35, 21, 20, -78, 8, -41, -69, -56, 15, 51, 14, 9, 40, -22, 25, -23, -61, 23, -20, 33, -48, 23, 65, -21, -40, -59, -9, 1, 25, -17, 3, -15, 33, -19, 32, 12, -14, -13, 14, 22, -14, -23, 10, -13, -60, -11, -61, 50, 25, 25, -36, 19, -61, 0, -24, -3, 29, 20, 1, 41, 1, -38, -17, -2, 17, 7, 18, -54, 9, -1, -29, -39, 6, 25, -26, -39, 6, -47, -38, 5, -38, 10, -28, -22, -53, 21, 23, 15, 5, -21, -34, -54, 10, -17, 45, 1, 7, -23, 24, -18, -2, -18, 28, 17, -10, 6, 4, -11, -7, -8, -33, 40, 8, 19, -53, 21, -45, 10, 5, -1, 17, 13, 25, 7, -72, -19, 0, 27, 31, 11, 11, -63, 1, -4, -79, -55, -13, 36, 2, -57, -6, -22, -42, -24, 5, -27, -39, -32, -64, 10, 32, 27, 46, -58, 14, 2, -35, -6, -21, -31, -23, -26, 23, -2, -34, 18, 20, 17, -18, -3, -29, -11, -35, -2, -27, 56, 15, 22, -52, -6, -53, 20, -10, 20, 36, -21, 6, 5, -7, -63, 2, 11, 22, -6, 16, -41, 13, -4, -21, -34, -36, 28, -44, -18, -47, -3, 12, 0, 23, -18, -10, -63, -44, -18, 6, -14, 14, -20, -5, -1, -50, -29, -47, 5, -6, 13, -10, 7, -17, 6, -20, -3, -5, -35, -24, 13, -46, 17, -7, 3, -68, 34, -37, -28, 11, -8, 3, -96, 14, -38, -21, 
  -43, -22, 8, 7, 47, -29, -26, -9, -13, 22, 20, 29, 27, 0, -24, -19, 25, 17, -28, -2, -28, 11, -59, -60, 9, -29, 28, 38, -16, -4, -70, -37, 4, -38, -32, 15, 10, -13, -2, -51, -9, -45, -63, 18, -25, -3, 7, 32, 4, -25, -7, -44, -34, 44, 5, -55, -3, 24, 20, 30, 16, -54, 10, -9, -68, -12, -31, -17, 12, -69, 12, 36, -22, 4, -9, 20, 4, 5, -37, 34, 20, -3, -6, 9, 1, 15, -43, -28, -2, -47, -37, 18, -26, 27, -9, -32, 27, 13, 3, -5, -26, 26, 14, -46, -25, -29, -67, 5, 9, 17, -24, 25, 5, -23, 4, -25, -24, -11, 19, -25, -4, -32, 41, 24, -40, -55, 23, 26, -92, -27, -33, -11, -20, -44, -6, -19, 5, -17, 9, 23, 22, -26, -76, 37, 40, 6, -42, -48, -5, 52, -62, 3, -44, -35, -42, -11, -11, 22, 7, -68, -21, 39, 59, 29, -32, 28, 0, -70, 17, -58, -30, 4, -10, 11, -53, 21, 16, -37, -9, -44, -34, 19, 2, -36, -43, 25, 18, 67, -3, -56, 12, -13, -59, -8, -11, 9, -38, -54, 17, 11, 25, -30, 15, 36, -7, 8, -61, 7, 30, -6, -7, -35, -7, 35, -101, -21, -57, -57, -32, 4, -16, 7, -22, -127, -1, 18, 32, -31, -7, 27, 27, -102, -16, -54, 6, 7, -11, 33, -55, 14, 17, -36, 9, -71, -39, 31, -10, -49, -74, 13, 41, 40, -2, -86, -54, 15, -79, -34, -60, 29, -28, -37, 26, 32, 14, -81, 25, 29, -8, 23, -70, 6, 44, -1, -21, -62, 12, 18, -87, -3, -33, -46, -45, -15, 4, -36, -3, -109, -21, 26, 2, 12, 8, 28, -15, -70, 28, -39, -15, 25, 8, 4, -66, 35, 1, -38, -14, -18, -19, 15, 4, -58, -24, 46, -20, 48, -117, -62, -38, -18, -86, -5, -18, 4, -37, -8, 23, 21, 11, -41, 32, 68, -11, -8, -38, -30, 29, 5, 16, -32, 14, 7, -49, 9, -14, -19, -3, 12, -4, -19, -52, -81, 22, 18, 4, 8, 27, 7, -26, -4, -15, -2, -4, -18, -7, -18, -58, -1, -27, -21, -14, -12, 10, 22, -55, -28, -5, 38, -81, 36, 2, -19, -76, 0, -91, -36, 11, 18, 11, 9, 16, 59, 15, -41, 31, 23, -37, -13, -3, -17, 57, -49, 13, -25, -18, -19, -18, -1, 31, -38, -28, -14, 17, -2, -51, -26, -8, 54, -14, -32, -17, 11, 10, -36, 0, -42, 5, -40, 19, 8, 1, -27, -14, -11, 15, -47, 28, 34, -43, -23, 21, 13, -52, 20, -21, -48, -27, 1, -49, -39, 6, 22, 4, -29, 24, 23, 8, 42, 45, 55, -21, -16, -33, -8, 47, -23, 25, -2, 1, -13, -19, -13, -10, -20, 4, 0, 2, -27, -13, 11, -11, 59, -13, 28, -7, 16, 2, 22, -14, 19, -19, -44, 17, -56, -40, 4, 0, 9, -4, -32, 23, -5, -58, -28, 8, -32, 6, 3, -26, -37, -14, -16, 
  15, -89, -32, 11, -44, 7, -63, -4, 7, 14, 0, 12, 9, 5, -35, -3, 9, 35, 24, 32, 15, 24, 32, 70, 35, 28, -36, -39, -12, -14, 56, 3, 14, -69, -25, -34, -2, 0, 12, 30, 4, -20, -31, 6, -16, -31, 53, -31, 11, 12, 16, 36, -46, -67, -12, 10, 12, 32, -1, 36, -1, 1, 24, 11, 35, -8, -24, 9, 0, -41, -17, -15, 30, 12, -30, 13, -27, -6, 26, -24, -22, 14, 39, -4, 8, -6, 10, 23, -96, 64, -25, -3, -8, 42, 39, -14, -5, -9, 17, -13, 18, 10, 10, -14, -8, -31, -43, -14, -18, 27, -7, -67, 21, 21, 21, 20, 30, -31, -20, 45, -36, 52, -5, -38, -12, -34, 20, -20, 15, 0, 3, 5, -35, -54, -8, -90, 23, -15, 0, 33, -15, -14, -48, -64, 11, -40, 20, 12, -12, -22, 39, -4, -40, 2, -41, -35, 16, 47, 18, -34, 14, -33, 35, 36, -5, 25, 3, -44, 19, -50, 5, 13, -37, -8, -35, -35, 13, -21, 6, 15, 32, -53, -23, 37, -29, 22, -36, -73, 4, -49, -9, 3, -47, -6, -36, 14, 5, -11, -97, -35, 18, 13, -42, 3, -11, 5, -31, -55, -37, 3, 1, 53, 19, 37, 32, 22, -32, 28, -87, -53, -10, -29, 13, -7, 7, -26, 25, -10, 11, 9, 14, 0, -15, -1, 7, 8, -111, -47, 9, -71, 11, 17, -19, 1, -4, -56, -74, 45, 1, 26, -76, -3, -18, -11, 18, 3, -51, -56, -26, 12, -89, 27, -32, -52, 20, -37, -10, -16, 5, 0, 18, -35, 2, 8, 9, 21, -4, 20, 35, -1, -4, 18, -9, -54, 3, 11, 13, -3, -21, -32, 14, 10, -19, -3, 10, -1, -14, 32, 3, -40, -78, -15, 19, -18, -11, -15, 9, 7, 9, -26, -51, 26, 25, 2, -103, -81, 15, -9, 14, -19, -27, 30, -16, -1, -103, 8, -75, -15, 31, 14, -21, 4, -15, -10, 3, -12, -15, 15, 1, 14, 0, -5, 23, 16, -27, 6, -24, -33, -15, 42, 30, 4, -19, -34, 2, 29, -26, 0, 14, 12, -21, 26, -11, -18, -53, -37, 32, -22, -1, 11, -24, 39, -10, -18, -21, 41, 8, 17, 2, -17, -42, 42, -4, -9, 13, -27, 14, 49, -47, 34, -14, -40, 14, 11, 1, 16, 51, 7, -29, 20, 22, 24, 19, 43, 4, -15, 42, 15, -12, 1, -44, -49, -13, -28, 52, -13, 14, -13, 27, -11, 7, -27, -14, -19, -8, -66, -9, -1, -30, 56, 2, 12, 13, 56, 3, 32, -40, 20, 5, 55, 59, 7, -38, -1, -5, 50, 7, -13, 18, -33, 20, -15, -73, 40, 37, 10, 5, 28, -10, -4, -9, -8, 42, -12, -16, -67, 26, 7, -11, -9, 62, 10, -116, -2, -34, -35, -31, 42, 37, -39, 27, 17, -2, -17, 4, 51, 3, 27, -6, 34, 18, 7, 27, 18, 33, 22, 30, 33, -19, 45, 36, 21, 14, 30, -5, 40, 14, -35, 13, 34, 29, 15, 
  -49, -42, -3, 11, -59, -60, -89, -27, 11, 38, -31, 1, 31, -19, -14, -61, -25, 19, -16, -22, 16, -21, 25, -4, -58, 31, -49, -80, -14, 15, -15, 30, 9, -48, -17, -16, -12, -23, 5, 20, 20, -4, -17, -8, -57, -49, 17, -1, 17, -13, 8, -3, -60, 11, -53, -45, -59, -13, 7, 4, -23, -9, -17, -6, -25, 0, -18, 39, -79, -29, -43, -50, 24, 0, -50, 5, 2, -26, -26, -58, -8, 15, -9, 44, -18, -11, 5, -20, -37, 25, 15, -54, 7, -9, 27, -24, 3, 4, 14, 16, 17, -15, -3, 0, -13, -44, -10, -41, -101, -99, -11, -39, 6, 26, -19, 24, -40, -68, -34, 8, -11, -26, -20, -13, -12, 7, 14, 7, -4, -39, 2, 25, -17, 12, -37, -26, 36, 27, -13, -41, 22, -17, 8, -27, -5, 42, 12, 38, 8, 55, 21, -10, -12, 22, 11, -2, -27, -9, 29, -35, -13, -40, 8, -1, -7, 32, 3, 21, 13, -12, -19, -41, -45, -42, 6, 2, -27, 25, -5, 36, -70, -67, -22, 14, 5, 32, 32, 4, -26, 19, 3, -9, 8, -16, -9, -3, -119, -1, 13, -23, 20, -15, 60, -8, 20, -14, 50, 22, 10, 1, 41, 44, -13, -2, 37, 21, -16, -1, 3, -5, 3, 10, 43, -1, 23, 17, 10, 22, -17, 17, 26, 5, -7, -36, 2, -6, 4, 32, 54, 41, -10, 55, 3, 25, -33, -34, 15, 51, 62, 38, 36, -20, 24, 27, 31, 5, 40, -28, -33, 9, -81, -11, -6, -16, 6, -2, 21, 41, 7, -2, 6, 22, 2, -16, 13, 5, -18, 9, 16, 27, -32, 33, -20, 29, 14, 9, 13, 3, 15, 19, 24, -44, -15, -28, -17, 6, -20, -32, 22, -9, 5, 19, 35, 17, -20, 13, -11, 56, 6, -47, 10, 35, 25, 51, 38, 16, -47, -16, 17, -11, 3, -30, 2, -1, -6, -8, 22, -16, 12, 13, 18, 9, 0, -28, 28, -37, -17, -20, 9, 26, 2, 20, -7, -17, -65, 15, 0, -14, -17, -51, -10, -24, 24, 21, 14, 6, 6, -18, 8, -7, 13, -18, 12, -28, -27, -9, -29, 13, -12, -3, -19, 21, 2, -52, -17, 22, 20, 39, 0, 31, -5, -15, -3, -14, -23, -11, -66, 5, -14, 0, -65, 12, 25, -9, -13, 5, -19, -12, 31, -25, -1, 40, -44, -9, -6, 40, 29, 21, -68, 26, 30, -20, -13, 18, -61, -61, 8, -4, 3, -14, 3, -27, 21, 27, -25, 15, -25, -9, -77, -67, -39, -19, -27, -63, -19, -5, -26, -37, -57, 5, -19, 14, -14, -17, 14, -22, -9, -28, -60, 25, 3, 14, -99, -16, -56, 11, 24, 20, -15, -13, -21, -1, -4, -5, 15, 25, -57, -24, -7, 11, 1, -21, -50, 42, -16, -70, -9, -44, 10, -27, -7, -26, 29, -48, 13, 25, 3, -54, 0, -36, -20, -14, -37, -31, -44, -54, -12, -12, 0, 11, -29, -18, -19, 13, 2, -32, 16, -3, -27, -14, -13, -60, 
};
const TfArray<2, int> tensor_dimension7 = { 2, { 11,512 } };
const TfArray<1, float> quant7_scale = { 1, { 0.0044946419075131416, } };
const TfArray<1, int> quant7_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[64] = { -972, -491, -914, -512, -605, -644, -479, -477, -109, -241, -964, -479, 167, -1066, -1030, -1727, -456, -480, -607, -460, -1141, -387, 329, -880, -221, 51, -936, -809, -1034, -405, -730, -624, -717, -329, -671, -690, -831, -44, -717, 131, -1034, 76, -247, -382, -453, -798, -529, -642, -965, -1162, -1015, -1013, -659, -318, -1027, -927, -1182, -1069, -621, -637, -1173, -303, -720, -667, };
const TfArray<1, int> tensor_dimension8 = { 1, { 64 } };
const TfArray<64, float> quant8_scale = { 64, { 0.00013256313104648143, 0.00012743269326165318, 0.00014479467063210905, 0.00010295061656506732, 0.00010979265789501369, 0.00012065516057191417, 0.00011303955398034304, 0.00012743586557917297, 0.0001026922109303996, 9.9813776614610106e-05, 0.00011418032954679802, 0.00011867143621202558, 0.0001273228699574247, 5.4967062169453129e-05, 0.00013717525871470571, 0.00011051560431951657, 0.00012702071398962289, 0.000105497550975997, 9.4980656285770237e-05, 0.00016929671983234584, 5.8675839682109654e-05, 0.000109530781628564, 0.00012004814198007807, 0.00010955664038192481, 0.0001254426606465131, 0.00014016895147506148, 0.00011896429350599647, 0.00012524152407422662, 7.641753472853452e-05, 9.2830952780786902e-05, 0.00011888621520483866, 0.0001286062179133296, 9.7897405794356018e-05, 0.00011323256330797449, 0.00014208002539817244, 0.00012864127347711474, 5.3196759836282581e-05, 0.00010141878738068044, 7.3957926360890269e-05, 0.00012783640704583377, 6.6122644057031721e-05, 0.00011450021702330559, 9.8671618616208434e-05, 8.4631217760033906e-05, 0.00017859836225397885, 0.00010579117224551737, 0.00013021982158534229, 0.00013271170610096306, 5.7610512158134952e-05, 0.00012343832349870354, 5.7991972425952554e-05, 0.00011753912986023352, 0.00013018280151300132, 0.00012850156053900719, 0.00012835857341997325, 0.0001060364957083948, 0.00012014745880151168, 0.00011089255713159218, 0.00014341615315061063, 0.00012184953811811283, 0.00012260461517143995, 0.00010426699736854061, 0.00013731216313317418, 0.00010782520985230803, } };
const TfArray<64, int> quant8_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[64*1*3*32] = { 
  /* [0][0][][] */ -1,-6,2,-29,43,-28,-10,54,-70,-41,37,25,10,13,-11,-23,88,-25,86,24,65,76,29,22,-1,85,29,-13,73,23,-61,40, -127,-1,-3,5,-14,52,-37,-65,-47,31,-76,-36,40,-29,-51,-48,49,-89,19,17,-30,7,-17,-34,25,-33,-9,-32,69,37,-57,-37, -30,-8,6,-51,1,-73,-24,9,-12,26,26,-36,-31,-12,-42,-97,-46,57,-100,26,-29,-8,47,-2,-23,-24,-68,-75,44,34,-38,-49, 
  /* [1][0][][] */ -56,-33,11,74,1,-60,-8,-78,15,7,84,30,-127,7,-1,15,-40,-48,-32,-127,-7,-92,20,40,67,79,-18,48,-95,-111,21,55, 41,-43,22,-31,-95,-19,-14,-44,-20,-18,1,10,-87,10,21,9,-43,-4,3,-7,10,31,-31,-46,-29,-1,36,35,-22,-67,15,48, -13,-11,-42,26,-30,-9,79,-33,28,-39,-49,42,-31,-9,61,-17,0,41,33,40,67,-40,42,21,1,23,40,3,-79,-49,9,60, 
  /* [2][0][][] */ 28,19,79,38,-82,11,46,-37,-59,81,-15,-8,-32,-61,-127,14,36,-54,-3,-29,-11,43,6,-25,-20,25,42,9,-60,-17,-27,-4, -42,-44,-2,2,-40,43,9,-20,-48,19,-92,37,-37,-43,-35,5,-42,46,-118,-3,-52,20,49,15,0,-30,3,-7,1,0,0,-49, 39,44,27,-11,-21,42,-70,-39,-69,120,-76,-75,-50,9,-28,-66,-51,1,-35,77,-38,42,14,27,-53,-7,-49,-31,-1,7,-11,-34, 
  /* [3][0][][] */ 55,3,-73,7,-80,13,53,-48,-13,-28,-58,-21,-6,64,-33,-59,-43,-14,12,91,56,5,-14,23,-21,28,-15,56,36,-56,-94,70, 8,12,-3,71,-54,66,-19,-37,-42,106,-65,-127,26,54,11,-6,39,5,45,-42,-8,-6,65,24,-5,-5,33,102,-41,-80,-60,39, -29,-37,22,50,-88,-35,-31,70,-4,8,-100,21,19,-32,-28,-9,21,-62,17,41,0,45,1,24,12,60,52,115,-52,31,-80,11, 
  /* [4][0][][] */ -39,-122,-40,-89,53,-111,-65,-5,-81,-92,-31,-3,-23,7,-27,-98,-63,99,-127,56,-107,82,64,-13,-19,-85,32,-18,24,13,56,-93, 17,-66,8,-36,5,-16,-5,21,17,32,21,-45,-56,-51,-72,-13,-28,18,-43,-5,28,61,46,41,-76,-57,34,37,21,-53,33,-13, 81,-33,49,-55,-26,-27,49,31,-32,86,-56,-57,-80,116,-31,84,36,93,-63,56,-59,34,-55,-5,-119,-38,54,38,29,-83,29,10, 
  /* [5][0][][] */ -31,-50,-72,40,-127,13,-35,28,-99,1,-41,26,-8,-119,-54,26,-1,-48,37,33,-85,-25,-44,-38,-29,-47,-88,30,-66,63,47,40, -30,55,-108,-28,-53,46,2,31,28,-59,-66,-30,-51,-36,-64,34,8,-40,-10,19,-53,27,-40,-73,4,-4,-43,-71,-32,52,-8,6, -79,68,-22,82,-75,-8,65,10,40,2,55,47,19,-61,10,112,-21,40,95,-32,13,-10,29,-85,2,28,-27,-42,-44,38,1,21, 
  /* [6][0][][] */ 99,-57,-57,-14,-53,-18,-61,-74,53,-22,77,-5,78,-66,32,39,-56,-91,28,-4,13,11,-112,7,-28,81,70,49,-127,-30,-39,2, -14,54,-82,-33,-6,-70,6,-18,-20,12,120,35,3,-107,50,49,-24,-107,10,-2,47,27,1,-65,45,98,-20,21,-110,-21,34,10, -39,14,-68,-67,11,-22,66,-59,-58,-11,51,-24,1,-80,-62,-45,62,-41,3,6,0,71,0,42,-33,46,-69,17,-32,1,77,26, 
  /* [7][0][][] */ -47,-39,-38,-3,-80,41,21,1,-20,-6,-99,-3,12,-66,-45,127,-33,-64,15,5,-32,-56,-3,-66,46,-57,-63,-48,-46,-12,33,43, -46,-25,-94,-39,-36,17,63,-23,57,49,-71,-32,70,-24,-11,92,-10,-60,-43,-27,-44,26,-26,-42,-3,1,9,-24,-40,-6,-7,59, 3,-1,-40,-53,-61,-52,20,-40,20,39,11,-23,50,-10,-22,29,-1,-49,-8,-43,25,15,-26,-48,51,40,27,-44,-44,-55,-42,41, 
  /* [8][0][][] */ 20,38,-26,17,-48,30,8,25,-30,11,-36,57,-41,57,58,18,-1,-57,-31,-8,-48,-95,3,57,83,-44,8,-24,-42,-127,-87,-18, 23,-1,39,78,-51,13,-18,25,-37,44,-13,118,-71,27,-6,40,-36,-68,-80,67,-12,-43,44,85,59,-90,18,-6,76,-83,-75,27, 50,-14,79,44,-51,70,-61,87,-23,15,-64,-20,25,4,29,11,-34,-43,-11,-19,-52,-8,-14,2,50,-96,-10,-20,-34,-12,-95,63, 
  /* [9][0][][] */ 77,-64,-4,-48,-29,-110,-57,-106,-42,14,-66,10,-93,74,-6,-40,-24,80,-6,-28,-52,36,15,29,3,-12,14,40,59,-74,-31,-34, 88,-38,54,-50,5,-7,-89,-91,18,47,32,-22,-12,113,30,8,-90,-14,-12,-79,-42,40,3,-41,-92,-20,-55,35,-64,-127,-37,-71, 56,-57,-27,-39,17,-104,-48,-32,-2,-52,-7,33,-55,109,62,-71,8,51,25,3,50,22,-16,37,-49,21,-30,64,-59,-83,-107,-85, 
  /* [10][0][][] */ 47,-44,-9,11,-80,-79,-25,12,37,-23,-34,-92,101,76,-31,-16,-64,-29,-23,67,4,-4,10,-34,20,59,33,21,21,-79,37,37, -32,33,15,13,-26,-9,-88,1,24,11,-22,-78,12,37,-46,7,42,-20,51,37,-59,63,70,-56,-39,19,-77,-70,74,41,-6,41, -98,29,-3,92,-62,-84,-96,-15,20,-10,15,-61,-127,-58,-2,23,100,-7,-35,0,-1,-1,-11,-36,20,-44,-31,-30,1,-4,63,-73, 
  /* [11][0][][] */ -79,-24,10,-1,-62,-66,53,66,50,-33,-69,-23,28,100,45,28,-44,-7,-9,14,-45,40,-22,-43,-40,44,38,29,100,-63,-44,50, 8,-56,3,-103,-71,47,30,16,65,20,-16,56,54,58,73,1,35,-38,-34,35,-39,22,-93,-14,13,-48,12,-52,-47,-83,-69,33, -52,-22,-41,48,-71,-67,-1,57,-8,-7,-127,15,50,63,58,22,-4,-1,25,-18,-72,-68,-8,47,41,-57,-54,-52,-12,-20,-99,64, 
  /* [12][0][][] */ -44,-109,40,-18,53,-33,-61,-44,22,-10,56,-27,0,-10,2,-58,19,62,-54,-29,-1,19,54,-61,-114,1,53,-8,14,21,-56,-15, 46,-127,16,37,-5,60,7,0,-52,-89,34,-46,111,-25,8,-31,2,14,-63,-36,70,60,2,-91,-106,25,71,28,-24,55,-54,-54, 54,29,-32,37,26,7,-44,-38,-47,-48,62,21,93,-47,-29,-41,-32,-73,-1,-81,64,-79,-49,-35,-16,21,41,-43,47,-24,-22,-93, 
  /* [13][0][][] */ -15,-116,31,-127,-69,71,-46,35,-59,-104,-72,14,-4,-75,-10,40,-88,-25,27,-94,-86,-62,-60,-14,-81,-5,38,110,52,-99,-55,-78, 11,-36,-86,-120,-55,-8,36,23,-98,-108,-12,-89,-127,41,-8,-83,44,0,1,-122,-95,-116,42,-13,-6,26,-116,13,35,66,16,-38, -28,-64,21,15,2,-88,-25,-74,20,-32,57,-75,44,56,-34,-52,24,-105,-11,-49,-89,-3,-51,14,-66,-77,-58,-70,-24,-124,5,-46, 
  /* [14][0][][] */ -15,-2,-32,-46,38,-28,29,24,23,9,-3,17,-21,-78,-52,58,-49,-48,-27,101,9,15,-76,20,-5,8,45,-5,59,-10,-47,-7, -39,27,9,30,46,-56,-46,10,-5,-23,56,-5,-29,-45,56,2,-68,-50,64,33,50,-29,-11,-38,12,51,0,-3,78,-15,-6,-31, -69,-79,6,-34,11,-59,-86,15,-58,20,6,-72,-28,-8,24,-89,-11,-19,-6,-53,10,59,-77,33,-127,53,-45,-37,8,45,7,-53, 
  /* [15][0][][] */ 2,24,-29,19,-35,-85,-9,-52,-37,-40,21,6,-58,-87,-40,-53,127,-62,-33,-37,46,-26,3,-16,-112,-16,-34,31,-94,-5,64,14, 6,32,-7,-18,82,-64,72,56,-35,-53,58,-15,-12,-118,-3,-51,75,39,106,-61,65,-29,66,-62,2,35,-42,-71,60,-15,25,-16, -4,19,-20,-22,11,-53,-62,-68,40,76,-19,-55,96,-35,-46,4,70,-21,37,-14,-19,-16,57,-91,17,15,1,-84,4,12,20,-45, 
  /* [16][0][][] */ 78,-27,10,-28,-15,11,18,-19,15,-46,40,66,127,52,19,0,-26,-15,-52,-13,-19,25,-27,-66,-15,17,39,-110,-2,-18,-48,-33, 55,-33,-46,-75,-89,7,-1,69,57,-55,-66,17,127,30,51,-7,3,-47,6,6,-64,53,-75,-87,37,34,-40,-33,-14,-51,-40,12, 35,7,-102,-75,-50,-12,-12,61,-1,-14,11,11,84,-5,33,78,-41,-51,21,-3,-12,21,-28,-78,51,-19,-31,-122,-15,5,35,12, 
  /* [17][0][][] */ 53,-85,-30,13,14,-20,64,-76,63,-8,92,91,-12,-70,-86,-15,-127,-123,25,-99,44,55,-40,21,-110,-63,90,-102,-42,39,-36,-41, 67,-10,-13,-56,38,22,7,19,37,-14,23,36,62,-112,-70,-40,-52,-125,60,-41,38,-3,-14,49,-68,-48,47,-87,-37,49,-49,-108, 72,56,-38,50,-26,-38,-8,39,-17,41,65,91,-13,-37,-105,71,-104,-40,-21,24,47,21,-94,-23,14,50,98,-60,-18,-23,13,-68, 
  /* [18][0][][] */ 52,48,27,11,37,-21,-37,33,3,2,-10,38,98,48,100,-49,59,-112,-9,109,46,-1,79,-39,49,9,-86,4,1,21,-112,127, -60,29,102,78,-8,-66,-83,90,-35,-11,56,-10,15,-70,-8,19,61,-84,20,18,-33,89,25,-3,-2,48,-78,69,23,31,-42,55, -71,26,-43,65,88,12,-45,18,-81,7,29,48,37,27,49,-106,-3,-68,41,94,-97,78,46,-15,48,40,-48,-48,92,127,-112,-55, 
  /* [19][0][][] */ -9,-31,-42,33,18,-3,-63,-60,-21,6,-5,14,15,-58,9,-40,-17,-13,13,-37,-32,31,-24,44,-34,21,-36,40,11,-30,-53,-35, 18,28,12,75,8,36,-127,8,-113,-36,-33,1,20,24,23,-17,-34,29,18,-14,-5,39,-33,31,-58,27,-5,-14,24,7,-31,-7, -93,92,77,12,52,-3,-37,24,27,-28,43,-7,54,58,-1,15,5,-3,-13,-29,2,-14,-8,-3,27,58,-30,22,49,28,-42,-44, 
  /* [20][0][][] */ -83,-114,-73,58,21,41,-59,18,56,64,-65,-42,-78,-68,-67,-75,30,-32,-93,21,61,-87,-88,-42,-83,31,17,-13,-108,-49,-25,28, 54,-7,-56,20,-73,33,-49,29,-36,-22,-55,-4,-45,18,70,-121,-127,-78,-46,36,27,-116,-47,-1,34,-91,-53,-30,16,-59,-25,19, 41,-53,6,-121,-42,-16,-23,28,-98,-125,-88,47,-50,18,-11,-77,-49,-16,15,-28,-48,24,33,-122,-64,-65,-60,-72,-72,7,46,51, 
  /* [21][0][][] */ 43,-121,-3,-3,27,-31,30,36,-73,-94,29,31,-72,-43,-12,-104,32,-19,26,21,-16,-48,3,-33,-90,-88,0,-16,-11,-28,31,-11, 9,-127,-59,58,30,-94,-32,49,-81,-33,20,-25,-26,30,-75,-118,-8,-90,27,-1,30,-70,39,44,-67,-17,6,-16,-26,5,5,18, 75,-47,-55,108,-100,11,3,29,13,-8,-30,26,24,99,78,54,-104,-58,25,29,21,44,-33,0,-50,101,10,91,31,-102,-31,-54, 
  /* [22][0][][] */ 2,-25,-4,33,-61,1,-121,0,-51,48,25,116,39,51,19,-11,-31,-41,7,22,-86,65,-30,52,-94,22,-69,40,60,20,-48,-24, 2,29,56,22,-15,58,-27,89,67,-24,-50,120,18,20,-9,-12,-38,-46,-29,41,-53,41,-32,9,2,-37,-64,-30,-3,8,-112,-55, 6,26,11,69,64,49,7,24,22,40,126,127,48,-5,-47,11,-44,-44,14,39,-42,33,-39,19,-35,-11,13,10,114,10,-74,33, 
  /* [23][0][][] */ -8,-25,14,17,-80,12,25,-46,5,79,-96,-85,-8,52,-1,-76,-36,13,18,93,24,61,103,-54,-65,52,-121,-27,39,31,6,90, -32,-108,10,-8,-7,41,17,57,27,95,-82,45,34,11,-19,-73,8,-53,85,62,-27,89,40,2,-6,58,-20,32,22,11,-97,58, -28,0,-26,17,7,9,-42,73,-20,77,-66,-26,-5,19,-61,6,55,24,72,55,-26,40,127,14,-48,-10,71,-59,98,30,-119,20, 
  /* [24][0][][] */ -71,-26,-15,-31,-59,99,-65,-66,-42,69,-113,-47,-41,53,-60,-38,52,-6,-53,5,-26,37,-84,-82,-84,-104,-52,-18,-13,23,20,68, -87,-12,-38,53,-75,-58,10,55,-62,1,-127,-98,-8,-30,-30,4,-10,-5,19,-63,-9,50,32,-23,1,-59,-92,41,42,-29,35,46, -22,56,34,37,-11,74,31,-42,-6,-6,-49,1,-40,100,-10,80,-67,41,-43,-4,36,25,1,11,33,13,15,20,85,32,107,76, 
  /* [25][0][][] */ -32,29,-39,35,17,-2,52,24,-48,-15,-1,101,55,-23,-31,22,58,-3,8,42,-56,-58,-33,-56,-37,-45,-34,26,22,61,-52,22, -21,-4,-74,-23,29,22,11,53,-20,-43,-24,40,41,-19,-25,-50,11,-68,14,-58,-27,-34,3,20,-6,-121,37,-45,-21,34,-42,47, 26,26,-39,50,43,-2,-3,1,-43,1,-17,127,21,-85,-50,-44,4,8,-6,43,-3,11,-39,-66,9,-115,53,-56,-11,48,-89,-6, 
  /* [26][0][][] */ -34,-36,-113,-37,12,-2,34,11,-25,-112,86,-22,39,-84,-26,46,-27,-120,15,11,87,57,-66,-32,-4,12,71,-64,-110,38,-89,-25, 54,-51,-90,2,-2,-29,38,-10,42,-51,99,57,22,-127,-41,-66,34,-11,14,10,28,-40,-94,12,31,-20,63,-7,-56,24,7,-21, -3,-13,4,25,51,-66,-24,-5,-59,-12,59,-62,-62,-49,-17,-108,63,58,14,26,-15,-23,13,-67,-101,-1,105,-14,29,41,39,-77, 
  /* [27][0][][] */ 17,48,-56,-118,9,-117,42,-59,-12,-69,58,-52,-79,-15,7,55,-85,52,16,42,-2,-12,64,-18,52,-21,-23,-7,-92,33,13,-25, 3,-19,-17,-23,70,-89,22,-7,21,-36,29,-96,-24,-56,15,28,-23,26,26,67,34,6,-12,-28,17,58,-7,33,35,11,67,77, -58,-47,7,28,64,12,-108,-24,-36,-24,-85,-73,-54,5,-17,-127,-50,28,-9,-21,-41,-66,-78,33,-45,-29,-86,1,76,-10,86,14, 
  /* [28][0][][] */ -20,-24,-38,5,12,-87,-57,13,-8,-58,-13,-77,-100,-20,-56,-19,-36,-119,-9,-10,-57,-23,17,-127,-63,-60,-93,-42,-54,14,-34,-19, -82,-60,-79,-38,-64,8,21,-112,59,-61,34,-103,9,-39,-63,-74,-60,18,-37,-42,-74,-49,-16,-6,18,-13,20,-17,-62,2,-2,-47, -28,-87,-68,9,-40,28,31,-34,-72,-106,-77,-76,43,14,-69,-16,-24,-40,-68,16,45,3,-21,-81,-48,46,-24,26,-58,10,-8,2, 
  /* [29][0][][] */ 11,28,38,-22,-69,-92,-52,-9,-51,-7,-104,-2,-11,50,-29,-66,-73,26,-33,26,5,11,-10,26,-67,-60,2,22,-36,-18,-33,-70, 19,-102,-92,-61,-11,-1,-55,48,-8,5,-78,51,-86,-49,-5,-97,-101,-27,-70,-68,-58,16,-28,23,11,-27,7,45,86,-23,-56,-105, 0,-127,19,-88,-49,56,-105,-55,-15,12,37,70,-59,-105,58,45,27,22,-79,-40,-4,-71,-55,93,0,-101,-40,-77,25,-80,-32,-29, 
  /* [30][0][][] */ -47,-8,22,12,-85,-73,-96,28,31,-40,47,22,64,-2,-12,-115,-20,-32,-3,-62,24,36,25,-26,-22,22,-58,6,-17,-39,-102,32, 17,-30,16,33,-13,28,-54,-36,-51,-34,48,10,90,8,-9,-64,26,-24,-25,22,22,71,55,11,-28,26,34,-43,-2,7,-86,33, -72,-6,18,-29,27,-52,-53,71,40,23,-6,18,23,-45,65,-47,4,-102,31,61,-29,-7,3,9,47,127,43,42,105,26,-27,-74, 
  /* [31][0][][] */ 10,19,56,11,-53,54,-38,91,-107,69,-52,3,-44,-38,-32,-19,42,14,-61,7,-107,26,-43,-8,-53,-62,-52,20,20,-43,-18,-47, -13,15,32,-61,-92,-17,-29,7,-80,-35,0,54,-98,-6,39,-23,-70,56,-37,26,-26,127,28,-36,-51,-23,-82,18,-33,22,-8,24, -60,-59,18,-58,-46,42,40,-26,15,13,-21,-8,58,-14,-40,-9,14,12,30,-27,60,100,-31,-63,-52,45,-48,-58,-17,40,-33,20, 
  /* [32][0][][] */ -11,-23,-16,-3,21,49,49,-23,-5,6,38,-15,-64,12,-14,-35,1,14,-71,-8,-37,26,-73,-46,-81,27,-1,-4,36,10,14,-80, -102,-51,12,-69,-45,-13,-65,-53,-30,-47,20,-28,-27,-81,-40,-12,25,-88,16,37,-20,-60,-31,-30,-25,-3,16,-51,21,-77,-51,-2, -2,-40,-32,-10,-56,-58,-60,63,-45,-127,-38,-46,-35,-47,-40,-22,-50,12,-93,-41,-15,-114,23,-35,-85,-47,20,-17,-12,43,-22,-80, 
  /* [33][0][][] */ -71,-33,-64,-11,-31,-59,30,6,95,26,-32,-111,91,5,78,29,-24,-127,37,-23,17,23,64,-91,82,98,-74,13,-65,-39,-64,96, -41,-13,-44,75,-95,58,-55,-53,5,48,-32,-12,2,-16,-5,31,-20,-16,32,2,-9,-10,70,18,1,4,-79,1,-29,-63,-10,45, 15,-16,41,-30,-19,-26,-71,28,-24,47,-77,-67,-54,78,-72,-15,-23,36,-11,34,-62,45,2,16,-3,-51,-60,-6,-58,-64,27,-17, 
  /* [34][0][][] */ 45,22,47,-16,26,-2,-40,-20,-34,-58,86,38,-22,-64,65,24,-42,-127,-38,-29,-19,-60,5,71,22,45,80,-69,7,-43,-28,25, 90,15,-15,29,-3,20,-3,-27,-54,-17,-19,37,39,16,-17,4,-30,1,-82,69,-13,33,-25,41,31,25,17,-17,-64,-7,-28,-16, 74,-54,-1,-4,-9,6,-37,89,18,-38,26,1,-6,-66,4,2,-37,-51,-5,16,-37,-14,-15,86,19,-43,5,-49,-43,-36,-20,41, 
  /* [35][0][][] */ 49,-74,-35,-92,-50,47,23,1,-33,-22,89,15,72,19,-39,-34,-2,-24,-6,-127,62,19,20,-5,50,18,8,-18,-32,-32,-8,-86, 13,-7,-19,-107,-23,31,-30,-1,-16,-18,11,-34,10,-7,5,-95,-45,-66,-28,-7,-33,70,-87,-9,16,-37,-29,-78,-68,-96,7,-11, -1,61,14,46,-20,-49,-102,-63,-10,26,-8,-110,23,-46,-43,-86,57,-13,18,46,5,38,-21,-53,-60,0,-35,20,-78,27,25,-19, 
  /* [36][0][][] */ -82,-8,-68,4,46,-70,-27,83,7,-123,-10,50,-74,-14,-66,-64,-102,-109,51,11,67,50,84,-124,-76,-96,36,47,-25,-126,13,-67, -25,-119,-78,40,74,34,47,-86,77,-127,-106,-48,-108,-3,-28,-73,-107,-115,-57,-21,69,37,15,-79,-8,-97,49,46,-99,-87,-32,-7, -38,-14,8,-43,-34,-59,10,-97,62,36,21,43,65,23,15,-19,-98,-29,40,32,-16,27,21,-13,-123,-30,10,54,-73,22,18,22, 
  /* [37][0][][] */ 50,-41,-10,-92,-11,-26,-27,5,-27,-37,-15,14,3,-13,-12,5,-103,-84,-89,11,-48,82,-57,-53,60,3,32,-74,-101,21,-22,20, 97,-43,74,-55,-7,85,-19,110,43,31,4,34,-13,-4,-9,80,-127,-87,-58,26,-8,-5,-76,-58,44,15,-8,-45,31,-100,-57,-10, -20,26,29,-79,72,7,18,112,-27,-50,108,-33,18,-44,17,55,-65,0,-38,-77,19,7,-72,38,61,-33,58,-78,-29,-5,-119,-23, 
  /* [38][0][][] */ -8,2,-12,41,-75,-62,61,-71,-72,-18,32,2,13,-59,-69,-74,25,-33,-68,-79,-104,-105,52,-51,24,-54,32,-44,20,35,-25,-85, -100,-84,8,-10,28,0,-31,-47,16,-17,-68,-41,-38,-70,-45,2,-77,-63,1,-46,-31,-46,-15,36,-13,-16,33,-56,58,-23,6,-18, 11,8,-127,14,-74,-39,-39,-71,-72,26,41,56,23,-49,32,-15,5,44,32,15,-64,42,44,-32,-81,47,-46,69,-19,56,-55,16, 
  /* [39][0][][] */ 15,27,38,0,-47,44,-46,-23,-10,36,-62,-51,-3,4,-35,-127,42,42,-59,-30,-32,76,55,40,-89,-46,-26,32,18,-47,-38,-19, 64,1,-30,-11,-49,14,-44,43,-21,32,-59,37,32,-8,-67,-12,7,18,-10,-40,-58,75,-14,-50,-46,-52,-25,45,-66,29,-58,-14, -27,40,-55,9,-16,64,43,30,-47,10,-17,67,-49,-29,15,62,50,44,20,102,13,-21,0,-98,-28,-98,-42,-80,-31,27,-56,29, 
  /* [40][0][][] */ 57,17,-89,-100,24,-38,39,10,-38,-72,-66,53,36,11,26,-65,-98,18,-10,-32,-83,49,-37,-77,-46,7,20,-61,-36,-40,-127,-37, -54,-20,-2,-40,-103,-36,-41,-51,3,41,30,-81,45,-33,-42,-47,-75,-9,9,-19,-1,-1,27,-91,-105,-115,32,-45,-78,-4,-61,41, -87,-80,-3,66,-98,-56,28,29,12,-103,-64,-95,28,-52,22,-73,-2,-43,28,38,-71,3,18,34,-79,-7,-111,-74,-1,29,12,49, 
  /* [41][0][][] */ -46,23,-6,-10,-59,-27,-82,31,-29,-2,-12,76,-58,7,-25,-58,27,-18,93,-43,-76,-30,-25,30,-28,-7,-69,83,21,48,38,63, -64,-16,-26,-62,-75,9,-22,0,-40,-2,44,-39,-117,11,67,30,-62,28,71,15,-29,-90,-30,-13,105,-32,-46,-33,51,-31,37,77, -127,-41,-70,29,2,-54,30,-22,49,-20,-91,19,-37,7,33,50,16,-41,57,-101,-22,-69,50,34,78,-82,-70,28,13,-43,-51,76, 
  /* [42][0][][] */ -22,127,30,-94,-9,29,3,67,-27,20,-33,-55,-50,46,40,-26,-45,39,-75,56,-55,40,-4,92,73,10,-82,17,10,13,-81,71, -6,91,3,-61,6,32,21,-14,-54,-36,-20,13,-82,44,6,71,-56,46,23,-11,31,92,50,89,52,-75,-70,-29,-4,-64,-61,63, -65,18,-42,-34,-111,33,29,43,-31,0,-87,-58,-37,86,-55,-11,0,60,32,0,-50,-120,27,25,-6,-118,-119,-15,-96,5,-16,46, 
  /* [43][0][][] */ -93,-61,-18,-29,-64,-76,-26,-32,-119,-49,-79,-76,-29,-90,-40,-110,-41,19,6,-24,-90,-67,-38,-16,-112,-106,6,-5,6,31,-32,42, 0,-47,-76,17,-84,-34,4,10,-64,-12,-91,-27,24,33,28,15,-39,-2,-93,-7,-63,-43,5,49,-53,-6,-101,-3,-36,-78,108,-10, -5,3,-89,-27,-80,46,-92,-72,-46,49,-44,-35,60,-50,-56,2,25,63,-32,-61,-52,-58,10,-21,21,7,0,-29,-127,-91,109,12, 
  /* [44][0][][] */ -41,56,-48,-34,31,-29,17,-7,25,32,39,45,22,-34,-3,12,30,-96,15,19,-14,39,-1,-9,7,5,-29,-76,26,32,-19,10, -89,10,-46,18,51,-51,28,-63,63,-10,9,-49,52,6,-20,10,-8,-54,43,-24,-20,-20,-13,-53,-16,51,-25,-56,-15,24,-18,-23, -49,9,-66,-22,32,-76,-3,-44,58,-18,-21,-127,32,15,-1,-43,-26,-42,1,-18,2,-19,26,0,16,43,-11,-34,61,-5,27,9, 
  /* [45][0][][] */ 2,84,-3,-7,75,-46,-2,-11,-18,55,127,30,-102,-97,75,-28,14,-74,-28,-37,52,43,12,-25,34,79,-25,-47,-38,18,41,-9, -34,-80,-58,45,-27,-54,13,-6,-4,67,29,-25,68,-43,20,-49,-49,-39,-65,-51,86,23,67,-103,-76,115,-15,-28,26,56,-50,41, -57,-10,-78,51,-102,-49,-28,-12,54,91,6,-33,99,9,82,-61,-60,-108,-77,123,27,-20,35,-91,69,116,32,-38,-56,-68,-90,-110, 
  /* [46][0][][] */ -16,2,11,46,-17,0,-99,23,-19,27,-36,-29,9,-17,-60,-48,-54,-40,-95,7,-78,-12,-11,-10,-9,22,-104,-29,-4,-33,-58,-55, 15,-18,7,37,-47,-41,-34,-1,-27,37,58,68,53,52,-22,14,-21,25,-11,87,-16,97,15,-82,-89,17,-28,-15,22,59,-15,48, -5,-48,-32,41,19,-11,46,71,52,19,22,11,127,-16,7,0,29,-93,-22,-21,44,20,-4,-62,-51,2,-6,-32,26,58,-9,5, 
  /* [47][0][][] */ -5,-49,53,-14,7,-34,-61,-6,0,-32,21,-82,-76,39,25,-106,46,12,-38,54,-24,-35,28,9,-8,-76,-77,-9,7,-37,40,-10, -41,22,44,18,29,-11,-9,-63,-42,36,8,2,-35,-23,17,-73,-4,15,-59,14,4,-11,91,-39,-63,17,-46,1,-35,14,3,-35, -127,-37,-86,41,-23,25,-23,6,-82,78,-4,-124,39,-97,19,10,36,-19,78,14,79,61,19,38,-35,93,-71,-41,1,79,7,71, 
  /* [48][0][][] */ 36,13,-55,-115,34,-3,89,-85,-26,-110,20,-87,-34,-14,-72,-102,-14,-40,-68,27,-8,38,-62,-85,-72,53,-120,56,30,19,-16,-84, -12,-69,1,-95,-12,66,-78,-13,-76,73,-100,20,-73,54,-18,-40,-88,-54,-29,-50,46,-30,-27,-45,-37,-67,44,-87,54,48,-28,-96, -59,-5,-91,-30,-1,-102,-42,-47,-31,25,-61,13,40,-26,-84,-25,-43,61,15,-3,2,61,15,-64,58,-70,-102,-81,0,-127,-91,-10, 
  /* [49][0][][] */ -16,-40,-36,53,-104,-32,-44,-21,26,-26,-85,-46,1,-25,11,-60,16,-127,-28,48,-5,21,-26,-38,-76,93,7,87,25,-58,-69,37, -11,29,56,3,8,8,3,39,22,-47,18,84,88,-62,19,-59,23,-10,6,-30,13,53,-36,-4,-42,54,-23,48,-29,-4,-70,17, -22,44,32,-17,-12,39,-31,54,-45,-37,58,15,71,-11,51,-70,2,-52,49,2,-5,59,-18,63,21,78,-32,7,26,3,0,79, 
  /* [50][0][][] */ -11,17,19,78,-60,-35,0,33,-52,-100,-6,-57,11,-72,54,25,-21,-105,-78,-13,-45,-23,25,-107,-23,5,45,-5,-31,-65,60,51, 66,20,-42,-42,-63,-118,0,-97,22,-114,17,-104,-51,23,25,59,70,-86,-82,-101,-35,-32,-58,-23,-127,-53,39,-102,-19,-70,-1,49, -105,-97,42,58,1,-81,38,27,-112,54,6,20,-100,-96,-54,-9,-92,-69,54,-17,-24,5,-99,-1,-104,48,-18,-111,-80,-94,-15,-43, 
  /* [51][0][][] */ -45,31,66,31,-20,-50,-49,4,-3,63,59,33,-24,-7,42,29,-93,-34,-67,16,-23,26,22,-20,3,114,38,19,25,-41,8,-3, -100,16,22,-16,-29,-52,-67,12,37,-68,33,-51,-86,-25,43,-63,-18,-32,-96,1,-23,35,-64,-37,-2,104,55,94,127,-12,-38,-59, -11,-17,30,32,-4,-29,9,25,-27,-63,81,25,-23,-24,91,28,56,-42,-8,21,-44,14,-65,-78,-68,81,39,19,-12,8,-50,-69, 
  /* [52][0][][] */ -26,9,-68,-16,-76,23,5,-5,4,-31,-22,-21,11,-88,-58,19,-38,-18,-82,21,-99,18,-16,-27,-67,9,2,-70,40,84,-14,-64, 3,19,-59,-8,29,31,33,-18,48,-45,127,41,-47,-87,52,39,-83,-32,13,0,74,15,18,15,40,59,-43,0,-60,-60,-34,-9, 32,-43,-65,14,8,-35,-27,-13,13,-20,-53,-57,-32,45,-39,-31,25,-1,37,-31,3,-29,-29,-5,-49,-2,7,-10,-67,52,18,30, 
  /* [53][0][][] */ 0,8,-47,-58,21,-28,3,-127,59,47,40,-62,-19,0,34,-26,23,-68,-6,-48,81,-20,59,-64,1,80,18,-20,-60,-52,49,-76, -28,-39,-59,-34,-18,-31,38,-125,35,45,26,-81,9,-5,10,-8,-4,-90,67,-43,69,62,19,-36,-26,45,21,-10,-47,-43,31,0, -25,-73,-66,-50,6,11,65,-107,52,18,-17,-63,38,-5,6,29,-59,-51,30,-75,107,-20,52,-85,21,76,-12,8,-79,-27,-87,-31, 
  /* [54][0][][] */ 10,-4,-39,-2,40,-54,-16,-42,-45,-38,4,7,-31,-111,-15,8,77,-37,-1,-31,67,-24,-36,-33,4,23,23,4,-78,-27,-61,-68, -111,71,-2,-44,70,-44,-23,-17,1,-59,88,-52,-43,-127,-30,-47,46,17,86,27,82,0,38,27,48,44,33,2,14,65,16,-7, -39,-32,-38,10,26,-40,6,-68,-54,-25,9,-36,-13,-71,-46,-25,1,-58,35,24,24,-33,48,-10,-82,42,-15,-59,50,62,12,-7, 
  /* [55][0][][] */ -93,102,83,41,9,-71,-100,94,31,-30,72,73,-10,-1,111,-18,-48,-47,-43,-1,-127,2,-71,-37,31,78,-27,-58,53,16,-97,-26, 20,-16,-11,56,18,12,-89,34,-32,-57,-45,26,28,13,22,-65,11,21,-18,24,-101,-9,-4,-44,5,57,-24,40,34,-13,-31,69, 2,-92,20,-7,-75,18,-48,124,21,12,38,98,4,-30,43,-31,-3,-1,8,18,-65,-20,27,-19,4,86,-49,-11,75,16,-123,-67, 
  /* [56][0][][] */ -10,19,30,85,-22,-68,-81,-21,-59,-67,7,-29,-9,-18,23,-5,-46,-8,-58,-5,-57,-15,-25,3,-71,56,-33,18,26,-11,-13,-51, -127,61,10,68,-24,4,-27,11,13,-85,28,7,19,34,-7,31,19,38,42,-32,12,25,-52,44,-75,59,-92,-47,60,19,-26,-78, -77,40,-28,19,-39,-22,11,77,-2,-55,45,23,15,-5,14,94,70,37,6,35,-33,42,-19,-36,-15,12,25,-16,26,74,-94,-47, 
  /* [57][0][][] */ 13,27,17,60,56,-26,-101,70,-14,-53,30,44,127,1,48,-27,37,-46,-78,19,6,20,-59,-71,-27,110,-35,-23,108,15,-10,33, 81,6,-60,50,52,12,-94,-5,-38,-61,38,-7,87,-37,37,-31,30,-64,-107,34,-59,1,-34,-48,0,46,112,-74,46,18,-54,-8, -35,-39,47,-23,-20,17,-58,70,-47,-38,37,26,63,-32,94,16,-11,-118,-35,-60,-27,-68,-26,-43,10,119,25,-46,43,-18,-31,26, 
  /* [58][0][][] */ 3,34,-18,46,53,-27,14,-5,-17,-21,-24,-30,28,-49,-25,-17,9,-76,-10,1,-34,-51,-18,7,-38,71,33,91,-4,26,15,-47, -27,37,-63,5,59,-65,-39,-48,-33,-24,31,-75,18,-51,-39,15,67,-82,29,-12,-42,-3,-19,9,-24,26,52,58,14,64,16,-26, -52,38,-36,35,75,-38,22,-46,6,-89,15,-127,26,19,-74,-61,69,-110,12,19,-24,-67,23,4,-43,-46,-9,-52,50,66,-15,35, 
  /* [59][0][][] */ -47,-58,-115,25,40,-15,-68,-39,-41,-49,-37,-121,3,-99,3,-109,127,-7,22,-34,20,-82,-4,-43,-25,-2,-76,-17,52,43,-22,-53, -28,-78,3,-16,-1,-1,-50,-57,-89,39,-38,-78,-7,-17,-34,-52,107,34,37,34,34,8,77,4,-95,-51,17,-20,-2,106,-26,-55, 50,-114,-53,-21,-22,-10,-36,-8,28,-61,45,35,60,52,25,7,-87,17,10,-5,111,-8,8,-74,-14,0,80,-2,-96,0,-115,-80, 
  /* [60][0][][] */ 75,-48,-20,-65,45,26,18,29,-49,-64,73,17,-44,27,54,-127,-74,25,-78,-6,116,-59,34,4,-64,28,51,-34,-44,-6,-30,-86, -93,-37,-87,40,-33,15,-64,-18,-51,-74,63,-78,-38,-58,-118,-98,-33,13,-26,-7,49,-73,36,-18,-4,-21,-6,25,-66,-52,-53,-33, 19,7,-41,62,-64,55,-19,-10,2,-25,26,-51,-114,-53,-87,-46,71,13,-63,27,-53,-67,-70,-123,-58,-12,63,-34,2,28,27,-52, 
  /* [61][0][][] */ -72,-61,-40,-5,-114,9,-56,6,-106,-18,-100,15,-7,-65,-64,-6,-70,-17,74,-33,-71,-86,-69,81,-53,-40,-123,40,-24,43,13,3, -8,34,-20,-3,-27,84,-9,82,-58,-78,-85,59,-10,-61,-33,54,-16,-35,-4,55,-70,-34,-97,-59,20,-43,35,-113,-78,43,-4,-34, -125,62,25,-64,17,53,102,33,-1,14,26,44,-26,-107,-48,127,12,36,39,89,-20,0,-70,-12,27,25,55,-105,-87,40,11,56, 
  /* [62][0][][] */ -26,-24,35,-31,77,-39,-57,-56,-34,40,-37,-39,-25,27,-6,-59,-24,42,7,-77,2,18,27,20,-25,-59,-42,29,36,-127,-52,14, -21,6,114,10,62,-47,-21,-6,-50,24,-10,24,71,30,55,25,-12,-20,4,-5,-43,104,-17,27,-12,-25,-11,-4,20,39,-41,29, 10,46,28,-30,15,50,2,3,22,-20,37,9,48,27,22,-29,4,-27,-75,31,-47,-29,-22,46,57,0,53,-32,38,48,-17,-12, 
  /* [63][0][][] */ -71,49,4,1,-38,41,-11,35,-36,6,-74,-23,-112,52,30,-4,-36,56,24,29,76,34,127,79,40,-8,-31,-9,1,2,-19,80, -37,60,61,-57,5,92,24,44,-89,63,-62,-93,-43,67,-112,-36,-13,3,-48,65,12,101,43,54,56,-42,-84,51,-19,63,-73,57, -33,31,-56,-36,16,3,7,15,-39,29,-61,-66,-74,77,-70,-66,51,37,-8,39,1,80,81,104,30,-71,-83,8,73,9,-9,0, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 64,1,3,32 } };
const TfArray<64, float> quant9_scale = { 64, { 0.0035740956664085388, 0.0034357716795057058, 0.0039038758259266615, 0.002775699133053422, 0.0029601706191897392, 0.003253039438277483, 0.0030477116815745831, 0.0034358573611825705, 0.0027687321417033672, 0.0026911252643913031, 0.0030784686096012592, 0.0031995554454624653, 0.0034328105393797159, 0.0014819923089817166, 0.0036984456237405539, 0.0029796622693538666, 0.0034246642608195543, 0.0028443681076169014, 0.0025608174037188292, 0.0045644869096577168, 0.0015819864347577095, 0.0029531100299209356, 0.0032366733066737652, 0.0029538071248680353, 0.0033821174874901772, 0.0037791598588228226, 0.0032074511982500553, 0.0033766943961381912, 0.0020603283774107695, 0.0025028581731021404, 0.0032053461764007807, 0.0034674115013331175, 0.0026394571177661419, 0.003052915446460247, 0.0038306850474327803, 0.0034683565609157085, 0.0014342623762786388, 0.002734398702159524, 0.001994013786315918, 0.0034466565120965242, 0.0017827630508691072, 0.0030870931223034859, 0.0026603310834616423, 0.0022817812860012054, 0.0048152729868888855, 0.0028522845823317766, 0.0035109168384224176, 0.0035781017504632473, 0.0015532636316493154, 0.0033280777279287577, 0.0015635483432561159, 0.0031690266914665699, 0.0035099186934530735, 0.0034645900595933199, 0.0034607348497956991, 0.0028588988352566957, 0.0032393510919064283, 0.002989825326949358, 0.0038667090702801943, 0.0032852415461093187, 0.0033055997919291258, 0.0028111906722187996, 0.0037021366879343987, 0.0029071252793073654, } };
const TfArray<64, int> quant9_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[32] = { 1122, -931, -640, -1193, -1693, -1827, -1980, -855, -3858, -714, -1238, 243, -2169, -433, -1055, -727, -1944, 175, -2369, -2946, -1636, -1736, -1051, -890, -823, -1544, -1825, -1242, -1800, -1557, -678, -1720, };
const TfArray<1, int> tensor_dimension10 = { 1, { 32 } };
const TfArray<32, float> quant10_scale = { 32, { 0.00015370352775789797, 0.00014283171913120896, 0.00019257563690189272, 0.00014846824342384934, 0.00013475290325004607, 0.00010697377001633868, 0.00012761542166117579, 0.00019522898946888745, 0.00011395254114177078, 0.00016824108024593443, 0.00023058967781253159, 0.00019313229131512344, 0.00014666460629086941, 0.00015067032654769719, 0.00014900165842846036, 0.00019520930072758347, 0.00016435098950751126, 0.00024449368356727064, 0.00014699224266223609, 0.00012113784032408148, 0.00013433585991151631, 0.00014041060057934374, 0.0001703129819361493, 0.00012007845361949876, 0.00014937696687411517, 0.0002073005452984944, 0.00013194991333875805, 0.00016661128029227257, 0.00015891324437689036, 0.00014111452037468553, 0.00013683151337318122, 0.00013518222840502858, } };
const TfArray<32, int> quant10_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[32*1*3*13] = { 
  /* [0][0][][] */ -9,-43,-86,66,-21,-18,-11,-13,31,54,30,-80,-39, -107,70,-113,-25,37,11,76,42,64,-25,22,-48,17, -29,-11,-40,-9,-33,127,52,-72,63,50,24,42,-23, 
  /* [1][0][][] */ -57,-105,-38,16,-67,80,56,46,-40,-81,34,-48,-4, 127,27,33,-58,-104,17,-17,70,-57,-56,53,-40,-11, 91,3,33,52,30,58,18,58,-18,-63,32,-15,10, 
  /* [2][0][][] */ 46,-60,-13,25,38,63,17,-10,-11,8,6,31,-8, -15,-127,-4,-33,-57,-34,-66,-36,24,-11,9,-41,20, 122,-49,2,10,42,30,61,-5,47,-6,19,-16,3, 
  /* [3][0][][] */ -111,127,5,-47,47,47,-5,38,-47,-24,-7,51,28, -34,121,-2,18,70,30,-29,51,52,-85,-49,20,-40, -30,82,-9,36,49,26,-65,-17,27,-93,22,-59,3, 
  /* [4][0][][] */ 127,-22,-12,46,-22,-53,-76,111,2,-86,22,-20,24, 63,-69,41,30,30,-94,-87,100,-92,-54,31,-9,70, -7,12,56,123,8,-62,-75,41,-91,-5,10,23,31, 
  /* [5][0][][] */ -83,-19,51,40,-113,-127,-21,-93,-31,-9,-109,-83,-86, 31,33,70,-12,-10,-28,66,61,43,30,25,16,62, -11,-37,-25,-13,-54,72,84,3,92,15,-69,-22,12, 
  /* [6][0][][] */ 63,35,-35,-58,-99,-63,30,22,0,-96,-41,-67,72, 1,-39,-75,-24,-114,-107,95,-51,-42,2,26,59,-51, 39,-22,-127,3,23,-37,-39,17,3,-26,42,42,-39, 
  /* [7][0][][] */ 70,127,35,56,-22,2,79,29,41,31,-22,-19,-26, 50,-65,-42,-12,25,-4,-6,-25,-5,2,-52,43,15, -5,1,-17,-55,-37,3,80,37,37,-23,-22,-55,43, 
  /* [8][0][][] */ 127,-39,-18,-93,-24,40,-3,-54,-86,-18,68,47,-100, 32,-49,-15,-53,-22,-37,14,-94,-76,32,-6,-27,-119, -50,-52,-48,38,22,5,-97,-60,-5,-18,52,87,-42, 
  /* [9][0][][] */ -127,64,13,-96,-32,-73,-46,-8,-13,-56,5,34,-35, 5,-24,92,-15,56,22,12,-72,44,23,4,32,-16, 56,-17,-25,-29,53,-45,19,10,38,12,64,30,-65, 
  /* [10][0][][] */ 127,-69,-62,-78,-60,15,-26,1,47,-9,-21,-10,-5, -4,-8,42,52,-22,6,-16,-19,50,-23,7,-61,13, -34,64,-36,56,15,-5,-26,-8,69,-13,-32,-43,23, 
  /* [11][0][][] */ -14,-53,-78,0,-56,-7,44,24,9,-17,-15,-15,54, -127,89,76,53,-6,14,28,26,47,13,5,15,30, 47,-100,-23,-61,-89,-51,-4,-20,40,8,-15,7,-4, 
  /* [12][0][][] */ -41,87,-29,115,-95,-34,-11,-57,-16,100,32,40,-89, 34,13,-25,38,-27,-86,99,-103,-11,33,103,1,-69, -102,127,48,91,-99,53,67,-26,5,32,71,-24,-80, 
  /* [13][0][][] */ -4,-64,44,78,16,-7,-127,-18,52,-2,-3,-13,-87, 73,-29,-52,65,59,87,-12,-97,50,94,68,-4,-23, -29,-36,-111,-56,11,83,-10,-124,-109,22,78,35,-43, 
  /* [14][0][][] */ 125,-113,-127,-87,11,15,-42,-64,-29,84,-39,62,-21, 28,-38,29,45,-39,75,33,-38,-38,36,-45,23,6, 9,48,74,-45,-32,35,22,7,-39,58,-2,40,-40, 
  /* [15][0][][] */ 0,54,12,-75,-3,24,53,28,3,-63,8,-8,31, 20,19,4,-75,-49,26,127,-4,-5,-44,-4,11,26, 61,33,-34,-94,-59,-46,77,-2,-38,-3,21,2,-30, 
  /* [16][0][][] */ -17,86,31,-49,-6,-13,-8,5,10,-60,-127,40,38, 33,10,78,70,13,-59,16,92,-60,-87,-35,41,28, 12,-51,-27,104,-39,-78,39,16,50,-42,-1,42,-64, 
  /* [17][0][][] */ 11,-127,-15,68,57,38,-18,25,30,-21,16,25,-28, -40,-53,12,11,24,27,-5,13,26,-20,1,-16,-11, -42,42,15,-32,-38,10,-18,-59,28,38,-67,-23,3, 
  /* [18][0][][] */ -41,17,-8,-9,10,-6,-42,-49,65,-30,13,60,75, 21,32,-22,-4,-23,-39,-61,-65,68,-61,2,127,41, -18,14,75,-16,-25,-42,18,-5,-77,-80,29,109,72, 
  /* [19][0][][] */ 1,76,19,13,63,51,43,27,27,-28,-76,17,-66, 99,14,17,122,127,-48,92,45,21,98,-29,2,-61, 54,61,-83,-84,-21,-84,-8,78,-43,22,26,38,-78, 
  /* [20][0][][] */ 73,-17,-113,7,-67,-37,-8,-31,89,22,29,19,18, -39,17,-73,30,-87,-22,-127,-95,100,12,-36,28,21, -50,37,-57,26,-34,17,-104,-71,78,14,-21,-49,63, 
  /* [21][0][][] */ -36,-127,-17,6,47,46,7,-18,81,70,51,-70,-78, -11,105,115,-14,-62,-94,-45,36,28,81,-8,-24,-39, 78,31,3,71,-3,-61,19,-11,-7,47,27,6,-19, 
  /* [22][0][][] */ 8,-85,-57,69,37,-4,64,8,-33,-22,29,44,-20, 64,61,9,-20,5,-59,-43,-19,-24,-36,26,38,47, -127,-4,-26,-46,2,-20,-41,-63,13,36,-4,-20,-51, 
  /* [23][0][][] */ 12,-15,20,-28,-37,-90,-36,20,9,127,21,-22,100, -67,-68,19,28,-88,73,-99,-65,-14,35,75,79,59, -27,-45,-66,100,92,-13,-51,-7,6,-68,-102,-68,37, 
  /* [24][0][][] */ 69,-17,-127,-76,-106,22,15,24,-67,37,77,41,105, 55,72,-30,-60,30,57,64,-39,-19,-82,0,-15,16, 24,-28,-10,-27,2,45,81,18,-25,14,1,37,1, 
  /* [25][0][][] */ 50,69,26,34,79,33,-18,-80,52,20,6,15,-43, 127,16,-32,-64,2,-1,-78,-40,24,53,13,-11,-20, 93,-3,94,14,30,4,-49,-10,-14,14,-27,-41,-14, 
  /* [26][0][][] */ -5,21,-127,59,25,-49,-65,67,21,6,8,-64,12, 30,-46,-112,-7,88,-92,-13,26,122,-42,22,-93,15, -22,-39,-96,-3,28,-49,-12,72,51,20,-37,-14,27, 
  /* [27][0][][] */ -42,33,-40,-59,50,127,-29,6,-10,55,2,17,17, -14,49,31,-46,73,8,-65,-86,-22,26,-18,36,2, 55,-27,-45,-6,48,43,-12,19,37,48,-90,28,-17, 
  /* [28][0][][] */ 113,56,75,105,-16,-54,-1,-13,-74,28,-4,2,-26, 22,6,90,-8,81,-12,-31,-48,19,-5,47,-12,-73, -5,-127,65,-110,85,-6,-67,-25,-71,6,17,-30,33, 
  /* [29][0][][] */ 12,-5,127,16,21,-82,32,104,38,-59,17,-73,-26, 6,70,58,107,10,-64,-45,-9,6,-13,8,-20,-5, 89,97,8,69,-76,-75,-65,46,-34,13,-65,17,13, 
  /* [30][0][][] */ -81,-127,63,48,94,80,1,31,-1,23,-45,55,61, -77,-61,35,8,85,110,2,16,-58,5,-16,19,43, -35,-33,85,-21,40,55,62,21,-110,0,-41,28,104, 
  /* [31][0][][] */ 56,56,-44,34,-16,31,110,7,-2,13,31,81,6, -86,-28,1,41,-35,-33,29,12,-61,33,29,54,4, 54,127,44,8,-24,-6,36,-45,-104,1,43,14,34, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 32,1,3,13 } };
const TfArray<32, float> quant11_scale = { 32, { 0.0037295380607247353, 0.0034657390788197517, 0.004672749899327755, 0.0036025065928697586, 0.003269710810855031, 0.0025956642348319292, 0.0030965234618633986, 0.004737132228910923, 0.0027650005649775267, 0.004082284402102232, 0.0055951415561139584, 0.0046862568706274033, 0.0035587421152740717, 0.0036559388972818851, 0.0036154496483504772, 0.0047366544604301453, 0.0039878934621810913, 0.0059325150214135647, 0.0035666921176016331, 0.0029393481090664864, 0.0032595915254205465, 0.0034069919493049383, 0.0041325581260025501, 0.0029136426746845245, 0.0036245561204850674, 0.0050300424918532372, 0.0032016974873840809, 0.0040427381172776222, 0.003855949267745018, 0.0034240721724927425, 0.0033201470505446196, 0.0032801281195133924, } };
const TfArray<32, int> quant11_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,31,13 } };
const TfArray<1, float> quant12_scale = { 1, { 0.041212484240531921, } };
const TfArray<1, int> quant12_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,31,32 } };
const TfArray<1, float> quant13_scale = { 1, { 0.037089977413415909, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,31,1,32 } };
const TfArray<1, float> quant14_scale = { 1, { 0.037089977413415909, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,16,1,32 } };
const TfArray<1, float> quant15_scale = { 1, { 0.037089977413415909, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,16,32 } };
const TfArray<1, float> quant16_scale = { 1, { 0.037089977413415909, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,16,64 } };
const TfArray<1, float> quant17_scale = { 1, { 0.04094696044921875, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,16,1,64 } };
const TfArray<1, float> quant18_scale = { 1, { 0.04094696044921875, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,8,1,64 } };
const TfArray<1, float> quant19_scale = { 1, { 0.04094696044921875, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,512 } };
const TfArray<1, float> quant20_scale = { 1, { 0.04094696044921875, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,11 } };
const TfArray<1, float> quant21_scale = { 1, { 0.2259657084941864, } };
const TfArray<1, int> quant21_zero = { 1, { 18 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,11 } };
const TfArray<1, float> quant22_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,11,10 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,2 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,3 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,9,8 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,4 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,5 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,7,6 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 416), (TfLiteIntArray*)&g0::tensor_dimension0, 403, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 8, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 44, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 5632, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 6144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 1248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension12, 403, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 992), (TfLiteIntArray*)&g0::tensor_dimension13, 992, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension14, 992, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 992), (TfLiteIntArray*)&g0::tensor_dimension15, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension16, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1024), (TfLiteIntArray*)&g0::tensor_dimension17, 1024, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension18, 1024, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1024), (TfLiteIntArray*)&g0::tensor_dimension19, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension20, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 512), (TfLiteIntArray*)&g0::tensor_dimension21, 11, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension22, 11, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[11] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[11] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_MAX_POOL_2D, OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_MAX_POOL_2D, OP_RESHAPE, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 23, };
const size_t tflNodes_subgraph_index[] = {0, 11, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  22, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_17_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 23;
  for (size_t i = 0; i < 23; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_17_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_17_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_17_invoke() {
  for (size_t i = 0; i < 11; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_17_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
